#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module RequisiteType
  PREREQUISITE = 1
  COREQUISITE = 2
  ANTIREQUISITE = 3
  VALUE_MAP = {1 => "PREREQUISITE", 2 => "COREQUISITE", 3 => "ANTIREQUISITE"}
  VALID_VALUES = Set.new([PREREQUISITE, COREQUISITE, ANTIREQUISITE]).freeze
end

class CourseRequirement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  COURSE_CODES = 2
  DESCRIPTION = 3

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => RequisiteType},
    COURSE_CODES => {:type => ::Thrift::Types::LIST, :name => 'course_codes', :element => {:type => ::Thrift::Types::STRING}},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || RequisiteType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

